
pipeline {
  agent { 
    node { label 'maven' }      
 }  
  environment {
        def readContent = readJSON file: './devops/env.json'
        componentName = "${readContent['component_name']}"
        projectName = "devtest" 
        builderImage = "jboss-eap72-openshift";
        latestTag = "latest";
        buildTag = "Build-${BUILD_NUMBER}";
        releaseTag = "qa";
        expSqdTag = "ibm-enablement";	  
      }  
  stages {
	  
  stage('Build App') { 
  
     steps {
       script{      
       sh "mvn package -DskipTests=true"
       }
      }
    }
   	  
 stage('Create Image') {
      steps {
        script {
          openshift.withCluster() {
              openshift.withProject("${env.projectName}") {
	      def bc = openshift.selector("bc", "${env.componentName}")      
              if ( !bc.exists() ) {
                  echo "No BuildConfig found. Creating ..."
		   
	         bc.newBuild( "${env.builderImage}", "--name=${env.componentName}", "--binary=true", "--strategy=source","--to=${env.projectName}/${env.componentName}:${env.latestTag}")    
            } else {
              echo "Found BuildConfig ${env.componentName}"
            }
            echo "Starting Image Build"
	      sh "ls -ltr target/" 
	      bc.startBuild("--from-file=./target/${env.binaryArtifact}.war","--follow=true")
	      echo "oc start-build ${env.componentName} --from-file=./target/${env.binaryArtifact}.war --follow -n ${env.projectName}"	         
              openshift.tag("${env.componentName}:${env.latestTag}", "${env.componentName}:${env.buildTag}")
	      openshift.selector("istag", "${env.componentName}:${env.latestTag}").delete()
              openshift.tag("${env.componentName}:${env.buildTag}", "${env.componentName}:${env.latestTag}")
              }
          }
         }
      }
    } 
	  
	  
     stage('Deploy Application') {
      	steps {
       	script {
        openshift.withCluster() {
          openshift.withProject("${env.projectName}") {
          //Application Deployment
          if ( openshift.selector("dc", "${env.componentName}").exists()) {
		          echo " ${env.componentName} is already deployed. Performing rolling update ..."
		          if ( "${env.ApplicationForceRollout}" == "true" ) {
		              def rm = openshift.selector("dc", "${env.componentName}").rollout().latest()
                  timeout(10) {
                    openshift.selector("dc", "${env.componentName}").related('pods').untilEach(1) {
                      return (it.object().status.phase == "Running")
			              }
                  }
              }
		      }
          else {
              def app = openshift.newApp("${env.componentName}")
              def appdc = openshift.selector("dc", "${env.componentName}")
              while (appdc.object().spec.replicas != appdc.object().status.availableReplicas) {
                  sleep 10
              }
              echo "Application deployed"
       }
        }
	      }
    	}
    }
}
	  
	  
    }
  }
